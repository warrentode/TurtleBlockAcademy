package com.github.warrentode.turtleblockacademy.datagen.loot.tables;

import com.aetherteam.aether.item.AetherItems;
import com.github.warrentode.turtleblockacademy.datagen.loot.ModLootProviders;
import com.github.warrentode.turtleblockacademy.loot.conditions.ModCheckCondition;
import com.github.warrentode.turtleblockacademy.loot.tables.KitchenLootTables;
import com.github.warrentode.turtleblockacademy.util.PackTags;
import com.hakimen.kawaiidishes.registry.ItemRegister;
import com.scouter.oceansdelight.items.ODItems;
import lekavar.lma.drinkbeer.registries.ItemRegistry;
import net.akaneo.fastfooddelight.common.registry.FFItems;
import net.brnbrd.delightful.common.item.DelightfulItems;
import net.mcreator.festivedelight.init.FestiveDelightModItems;
import net.mcreator.phantasm.init.PhantasmModItems;
import net.mehvahdjukaar.hauntedharvest.integration.forge.FDCompatImpl;
import net.mehvahdjukaar.supplementaries.reg.ModRegistry;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.effect.MobEffects;
import net.minecraft.world.item.Items;
import net.minecraft.world.level.storage.loot.LootPool;
import net.minecraft.world.level.storage.loot.LootTable;
import net.minecraft.world.level.storage.loot.entries.LootItem;
import net.minecraft.world.level.storage.loot.entries.LootTableReference;
import net.minecraft.world.level.storage.loot.entries.TagEntry;
import net.minecraft.world.level.storage.loot.functions.SetItemCountFunction;
import net.minecraft.world.level.storage.loot.functions.SetStewEffectFunction;
import net.minecraft.world.level.storage.loot.predicates.LootItemRandomChanceCondition;
import net.minecraft.world.level.storage.loot.providers.number.ConstantValue;
import net.minecraft.world.level.storage.loot.providers.number.UniformGenerator;
import org.jetbrains.annotations.NotNull;
import umpaz.farmersrespite.common.registry.FRItems;
import umpaz.nethersdelight.common.registry.NDItems;
import vectorwing.farmersdelight.common.registry.ModItems;

import java.util.function.BiConsumer;
import java.util.function.Consumer;

import static net.mcreator.unusualend.init.UnusualendModItems.*;
import static net.mehvahdjukaar.hauntedharvest.reg.ModRegistry.*;
import static net.mehvahdjukaar.snowyspirit.reg.ModRegistry.*;
import static samebutdifferent.ecologics.registry.ModItems.*;

public class KitchenLootTablesGen implements Consumer<BiConsumer<ResourceLocation, LootTable.Builder>> {
    @Override
    public void accept(@NotNull BiConsumer<ResourceLocation, LootTable.Builder> consumer) {

        consumer.accept(KitchenLootTables.KITCHEN, LootTable.lootTable()
                .withPool(LootPool.lootPool().setRolls(UniformGenerator.between(2, 4))
                        .setBonusRolls(ConstantValue.exactly(1.0F))
                        .add(LootTableReference.lootTableReference(KitchenLootTables.VANILLA_EDIBLES))
                        .add(LootTableReference.lootTableReference(KitchenLootTables.FARMERSDELIGHT_EDIBLES))
                        .add(LootTableReference.lootTableReference(KitchenLootTables.FARMERSRESPITE_EDIBLES))
                        .add(LootTableReference.lootTableReference(KitchenLootTables.DELIGHTFUL_EDIBLES))
                        .add(LootTableReference.lootTableReference(KitchenLootTables.FASTFOODDELIGHT_EDIBLES))
                        .add(LootTableReference.lootTableReference(KitchenLootTables.FESTIVEDELIGHT_EDIBLES))
                        .add(LootTableReference.lootTableReference(KitchenLootTables.ENDSDELIGHT_EDIBLES).when(ModLootProviders.IN_END))
                        .add(LootTableReference.lootTableReference(KitchenLootTables.NETHERSSDELIGHT_EDIBLES).when(ModLootProviders.IN_NETHER))
                        .add(LootTableReference.lootTableReference(KitchenLootTables.OCEANSDELIGHT_EDIBLES))
                        .add(LootTableReference.lootTableReference(KitchenLootTables.SUPPLEMENTARIES_EDIBLES))
                        .add(LootTableReference.lootTableReference(KitchenLootTables.HAUNTEDHARVEST_EDIBLES))
                        .add(LootTableReference.lootTableReference(KitchenLootTables.SNOWYSPIRIT_EDIBLES))
                        .add(LootTableReference.lootTableReference(KitchenLootTables.ECOLOGICS_EDIBLES))
                        .add(LootTableReference.lootTableReference(KitchenLootTables.PHANTASM_EDIBLES).when(ModLootProviders.IN_END))
                        .add(LootTableReference.lootTableReference(KitchenLootTables.UNUSUALEND_EDIBLES).when(ModLootProviders.IN_END))
                        .add(LootTableReference.lootTableReference(KitchenLootTables.DRINKBEERREFILL_EDIBLES))
                        .add(LootTableReference.lootTableReference(KitchenLootTables.KAWAIIDISHES_EDIBLES))
                        .add(LootTableReference.lootTableReference(KitchenLootTables.WILDBERRIES_EDIBLES))
                        .add(LootTableReference.lootTableReference(KitchenLootTables.CRABBERSDELIGHT_EDIBLES))
                        .add(LootTableReference.lootTableReference(KitchenLootTables.AETHER_EDIBLES).when(ModLootProviders.IN_AETHER))
                )
        );

        consumer.accept(KitchenLootTables.WILDBERRIES_EDIBLES, LootTable.lootTable()
                .withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1))
                        .setBonusRolls(ConstantValue.exactly(1.0F))
                        .when(ModCheckCondition.mod().isLoaded("wildberries"))
                        .add(TagEntry.expandTag(PackTags.Items.WILDBERRIES_EDIBLES)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                )
        );

        consumer.accept(KitchenLootTables.CRABBERSDELIGHT_EDIBLES, LootTable.lootTable()
                .withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1))
                        .setBonusRolls(ConstantValue.exactly(1.0F))
                        .when(ModCheckCondition.mod().isLoaded("crabbersdelight"))
                        .add(LootItem.lootTableItem(alabaster.crabbersdelight.common.registry.ModItems.COOKED_CRAB.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(alabaster.crabbersdelight.common.registry.ModItems.COOKED_CLAWSTER.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(alabaster.crabbersdelight.common.registry.ModItems.COOKED_SHRIMP.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(alabaster.crabbersdelight.common.registry.ModItems.COOKED_CLAM_MEAT.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(alabaster.crabbersdelight.common.registry.ModItems.KELP_SHAKE.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(alabaster.crabbersdelight.common.registry.ModItems.CRAB_CAKES.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(alabaster.crabbersdelight.common.registry.ModItems.FISH_STICK.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(alabaster.crabbersdelight.common.registry.ModItems.SURF_AND_TURF.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(alabaster.crabbersdelight.common.registry.ModItems.SHRIMP_SKEWER.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(alabaster.crabbersdelight.common.registry.ModItems.CLAM_BAKE.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(alabaster.crabbersdelight.common.registry.ModItems.CLAM_CHOWDER.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(alabaster.crabbersdelight.common.registry.ModItems.COOKED_TROPICAL_FISH.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(alabaster.crabbersdelight.common.registry.ModItems.COOKED_TROPICAL_FISH_SLICE.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(alabaster.crabbersdelight.common.registry.ModItems.BISQUE.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(alabaster.crabbersdelight.common.registry.ModItems.SEAFOOD_GUMBO.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(alabaster.crabbersdelight.common.registry.ModItems.STUFFED_NAUTILUS_SHELL.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                )
        );

        consumer.accept(KitchenLootTables.AETHER_EDIBLES, LootTable.lootTable()
                .withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1))
                        .setBonusRolls(ConstantValue.exactly(1.0F))
                        .when(ModCheckCondition.mod().isLoaded("aether"))
                        .add(LootItem.lootTableItem(AetherItems.BLUE_BERRY.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(AetherItems.ENCHANTED_BERRY.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(AetherItems.WHITE_APPLE.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(AetherItems.BLUE_GUMMY_SWET.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(AetherItems.GOLDEN_GUMMY_SWET.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(AetherItems.HEALING_STONE.get()))
                        .add(LootItem.lootTableItem(AetherItems.CANDY_CANE.get()).when(ModLootProviders.CHRISTMAS_EVENT)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(AetherItems.GINGERBREAD_MAN.get()).when(ModLootProviders.CHRISTMAS_EVENT)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                )
        );

        consumer.accept(KitchenLootTables.OCEANSDELIGHT_EDIBLES, LootTable.lootTable()
                .withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1))
                        .setBonusRolls(ConstantValue.exactly(1.0F))
                        .when(ModCheckCondition.mod().isLoaded("oceansdelight"))
                        .add(LootItem.lootTableItem(ODItems.SQUID_RINGS.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ODItems.BAKED_TENTACLE_ON_A_STICK.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ODItems.COOKED_GUARDIAN_TAIL.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ODItems.BOWL_OF_GUARDIAN_SOUP.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ODItems.ELDER_GUARDIAN_ROLL.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ODItems.CABBAGE_WRAPPED_ELDER_GUARDIAN.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ODItems.FUGU_ROLL.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ODItems.BRAISED_SEA_PICKLE.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ODItems.COOKED_STUFFED_COD.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ODItems.HONEY_FRIED_KELP.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ODItems.SEAGRASS_SALAD.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                )
        );

        consumer.accept(KitchenLootTables.NETHERSSDELIGHT_EDIBLES, LootTable.lootTable()
                .withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1))
                        .setBonusRolls(ConstantValue.exactly(1.0F))
                        .when(ModCheckCondition.mod().isLoaded("nethersdelight"))
                        .add(LootItem.lootTableItem(NDItems.HOGLIN_SIRLOIN.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(NDItems.HOGLIN_EAR.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(NDItems.WARPED_MOLDY_MEAT.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(NDItems.GRILLED_STRIDER.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(NDItems.STRIDER_MOSS_STEW.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(NDItems.PLATE_OF_STUFFED_HOGLIN_SNOUT.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(NDItems.PLATE_OF_STUFFED_HOGLIN_HAM.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(NDItems.PLATE_OF_STUFFED_HOGLIN_ROAST.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(NDItems.NETHER_SKEWER.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(NDItems.MAGMA_GELATIN.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                )
        );

        consumer.accept(KitchenLootTables.ENDSDELIGHT_EDIBLES, LootTable.lootTable()
                .withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1))
                        .setBonusRolls(ConstantValue.exactly(1.0F))
                        .when(ModCheckCondition.mod().isLoaded("ends_delight"))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.FriedDragonEgg.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.RoastedShulkerMeat.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.RoastedShulkerMeatSlice.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.SmokedDragonLeg.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.RoastedDragonMeat.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.RoastedDragonMeatCuts.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.DriedEnderMiteMeat.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.StuffedRiceCake.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.ChorusFlowerPie.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.ChorusFruitWine.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.ChorusFruitMilkTea.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.BubbleTea.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.DragonBreathSoda.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.ChorusFlowerTea.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.ChorusCookie.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.ChorusFruitPopsicle.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.ChorusFruitPieSlice.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.ChorusFruitPie.get()))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.EnderCongee.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.DragonBreathAndChorusSoup.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.StirFriedShulkerMeat.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.RoastedDragonSteak.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.EndMixedSalad.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.AssortedSalad.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.EndBarbecueStick.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.DragonLegWithSauce.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.SteamedDragonEgg.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.DragonMeatStew.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(cn.foggyhillside.endsdelight.registry.ItemRegistry.GrilledShulker.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                )
        );

        consumer.accept(KitchenLootTables.KAWAIIDISHES_EDIBLES, LootTable.lootTable()
                .withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1))
                        .setBonusRolls(ConstantValue.exactly(1.0F))
                        .when(ModCheckCondition.mod().isLoaded("kawaiidishes"))
                        .add(LootItem.lootTableItem(ItemRegister.whiteChocolateBar.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.darkChocolateBar.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.milkChocolateBar.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.expressoCoffee.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.americanCoffee.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.latteCoffee.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.mochaCoffee.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.macchiatoCoffee.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.doppioCoffee.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.cappuccinoCoffee.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.sweetBerryIceCream.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.napolitanoIceCream.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.creamIceCream.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.chocolateIceCream.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.coffeeIceCream.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.mochaIceCream.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.glowBerryIceCream.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.sweetBerryMilkshake.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.chocolateMilkshake.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.creamMilkshake.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.coffeeMilkshake.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.mochaMilkshake.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.glowBerryMilkshake.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.brigadeiroMix.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.cakePiece.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.cheeseCakePiece.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.chocolateCheeseCakePiece.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.honeyCheeseCakePiece.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.beijinho.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.brigadeiro.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.sweetBerryCookie.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.honeyCookie.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.chocolateCookie.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.goldenCookie.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegister.unbindingCookie.get())
                                .when(LootItemRandomChanceCondition.randomChance(0.1F)))
                )
        );

        consumer.accept(KitchenLootTables.FARMERSRESPITE_EDIBLES, LootTable.lootTable()
                .withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1))
                        .setBonusRolls(ConstantValue.exactly(1.0F))
                        .when(ModCheckCondition.mod().isLoaded("farmersrespite"))
                        .add(LootItem.lootTableItem(FRItems.GREEN_TEA.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.YELLOW_TEA.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.BLACK_TEA.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.ROSE_HIP_TEA.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.DANDELION_TEA.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.PURULENT_TEA.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.GAMBLERS_TEA.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.COFFEE.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.LONG_GREEN_TEA.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.LONG_YELLOW_TEA.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.LONG_BLACK_TEA.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.LONG_ROSE_HIP_TEA.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.LONG_DANDELION_TEA.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.LONG_PURULENT_TEA.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.LONG_GAMBLERS_TEA.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.LONG_COFFEE.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.LONG_APPLE_CIDER.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.STRONG_GREEN_TEA.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.STRONG_YELLOW_TEA.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.STRONG_BLACK_TEA.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.STRONG_ROSE_HIP_TEA.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.STRONG_PURULENT_TEA.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.STRONG_GAMBLERS_TEA.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.STRONG_COFFEE.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.STRONG_MELON_JUICE.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.STRONG_APPLE_CIDER.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.STRONG_HOT_COCOA.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.GREEN_TEA_COOKIE.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.NETHER_WART_SOURDOUGH.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.BLACK_COD.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.TEA_CURRY.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.BLAZING_CHILI.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.COFFEE_CAKE_SLICE.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FRItems.ROSE_HIP_PIE_SLICE.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                )
        );

        consumer.accept(KitchenLootTables.DRINKBEERREFILL_EDIBLES, LootTable.lootTable()
                .withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1))
                        .setBonusRolls(ConstantValue.exactly(1.0F))
                        .when(ModCheckCondition.mod().isLoaded("drinkbeer"))
                        .add(LootItem.lootTableItem(ItemRegistry.BEER_MUG.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegistry.BEER_MUG_BLAZE_STOUT.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegistry.BEER_MUG_BLAZE_MILK_STOUT.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegistry.BEER_MUG_APPLE_LAMBIC.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegistry.BEER_MUG_SWEET_BERRY_KRIEK.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegistry.BEER_MUG_HAARS_ICEY_PALE_LAGER.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegistry.BEER_MUG_PUMPKIN_KVASS.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegistry.BEER_MUG_NIGHT_HOWL_KVASS.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ItemRegistry.BEER_MUG_FROTHY_PINK_EGGNOG.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                )
        );

        consumer.accept(KitchenLootTables.FESTIVEDELIGHT_EDIBLES, LootTable.lootTable()
                .withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1))
                        .setBonusRolls(ConstantValue.exactly(1.0F))
                        .when(ModCheckCondition.mod().isLoaded("festive_delight"))
                        .add(LootItem.lootTableItem(FestiveDelightModItems.FESTIVE_CHIKEN.get())
                                .when(ModLootProviders.NEW_YEAR_EVENT.or(ModLootProviders.CHRISTMAS_EVENT).or(ModLootProviders.EASTER_EVENT))
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FestiveDelightModItems.CHRISTMAS_TEA.get()).when(ModLootProviders.CHRISTMAS_EVENT)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FestiveDelightModItems.GINGERBREAD_MAN.get()).when(ModLootProviders.CHRISTMAS_EVENT)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FestiveDelightModItems.GINGERBREAD_MAN_CREEPER.get())
                                .when(ModLootProviders.CHRISTMAS_EVENT)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FestiveDelightModItems.GINGERBREAD_COOKIE_CREEPER.get())
                                .when(ModLootProviders.CHRISTMAS_EVENT)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FestiveDelightModItems.GINGERBREAD_COOKIE_FLAKE.get())
                                .when(ModLootProviders.CHRISTMAS_EVENT)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FestiveDelightModItems.GINGERBREAD_COOKIE_SWORD.get())
                                .when(ModLootProviders.CHRISTMAS_EVENT)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FestiveDelightModItems.SUGAR_CANE.get()).when(ModLootProviders.CHRISTMAS_EVENT)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FestiveDelightModItems.SALMON_VERRINES.get()).when(ModLootProviders.NEW_YEAR_EVENT)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FestiveDelightModItems.LONGEVITY_NOODLE.get()).when(ModLootProviders.NEW_YEAR_EVENT)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FestiveDelightModItems.SPRING_ROLLS.get()).when(ModLootProviders.NEW_YEAR_EVENT)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FestiveDelightModItems.SUS_BREAD.get()).when(ModLootProviders.HALLOWEEN_EVENT)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                )
        );

        consumer.accept(KitchenLootTables.DELIGHTFUL_EDIBLES, LootTable.lootTable()
                .withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1))
                        .setBonusRolls(ConstantValue.exactly(1.0F))
                        .when(ModCheckCondition.mod().isLoaded("delightful"))
                        .add(LootItem.lootTableItem(DelightfulItems.ACORN.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.SALMONBERRIES.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.SALMONBERRY_GUMMY.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.SALMONBERRY_PIE_SLICE.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.PUMPKIN_PIE_SLICE.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.MATCHA_ICE_CREAM.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.SALMONBERRY_ICE_CREAM.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.COCONUT_CURRY.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.SINIGANG.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.CACTUS_STEAK.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.FIELD_SALAD.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.LAVENDER_TEA.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.AZALEA_TEA.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.PRICKLY_PEAR_JUICE.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.ENDER_NECTAR.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.MATCHA_LATTE.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.BERRY_MATCHA_LATTE.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.NUT_BUTTER_AND_JELLY_SANDWICH.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.CHEESEBURGER.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.DELUXE_CHEESEBURGER.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.CHUNKWICH.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.CHUNK_NUGGET.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.ROCK_CANDY.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.COOKED_MARSHMALLOW_STICK.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.SMORE.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.CRAB_RANGOON.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.HONEY_GLAZED_WALNUT.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.COOKED_VENISON_CHOPS.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.COOKED_GOAT.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(DelightfulItems.CANTALOUPE_SLICE.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                )
        );

        consumer.accept(KitchenLootTables.UNUSUALEND_EDIBLES, LootTable.lootTable()
                .withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1))
                        .setBonusRolls(ConstantValue.exactly(1.0F))
                        .when(ModCheckCondition.mod().isLoaded("unusualend"))
                        .add(LootItem.lootTableItem(CHORUS_PIE.get()).setWeight(10))
                        .add(LootItem.lootTableItem(CHORUS_JUICE.get()).setWeight(10))
                        .add(LootItem.lootTableItem(CHORUS_TEA.get()).setWeight(10))
                        .add(LootItem.lootTableItem(ENDER_STEW.get()).setWeight(10))
                        .add(LootItem.lootTableItem(WANDERING_STEW.get()).setWeight(10))
                )
        );

        consumer.accept(KitchenLootTables.ECOLOGICS_EDIBLES, LootTable.lootTable()
                .withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1))
                        .setBonusRolls(ConstantValue.exactly(1.0F))
                        .when(ModCheckCondition.mod().isLoaded("ecologics"))
                        .add(LootItem.lootTableItem(CRAB_MEAT.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(TROPICAL_STEW.get()).setWeight(10))
                        .add(LootItem.lootTableItem(COOKED_PRICKLY_PEAR.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(WALNUT.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                )
        );

        consumer.accept(KitchenLootTables.SNOWYSPIRIT_EDIBLES, LootTable.lootTable()
                .withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1))
                        .setBonusRolls(ConstantValue.exactly(1.0F))
                        .when(ModCheckCondition.mod().isLoaded("snowyspirit"))
                        .add(LootItem.lootTableItem(CANDY_CANE.get()).setWeight(10).when(ModLootProviders.CHRISTMAS_EVENT)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(GINGERBREAD_COOKIE.get()).setWeight(10).when(ModLootProviders.CHRISTMAS_EVENT)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(EGGNOG.get()).setWeight(10)
                                .when(ModLootProviders.CHRISTMAS_EVENT.or(ModLootProviders.NEW_YEAR_EVENT)))
                )
        );

        consumer.accept(KitchenLootTables.HAUNTEDHARVEST_EDIBLES, LootTable.lootTable()
                .withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1))
                        .setBonusRolls(ConstantValue.exactly(1.0F))
                        .when(ModCheckCondition.mod().isLoaded("hauntedharvest"))
                        .add(LootItem.lootTableItem(CANDY_CORN.get()).setWeight(10).when(ModLootProviders.HALLOWEEN_EVENT)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(COOKED_COB.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FDCompatImpl.CORNBREAD.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FDCompatImpl.SUCCOTASH.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(POP_CORN.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                )
        );

        consumer.accept(KitchenLootTables.SUPPLEMENTARIES_EDIBLES, LootTable.lootTable()
                .withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1))
                        .setBonusRolls(ConstantValue.exactly(1.0F))
                        .when(ModCheckCondition.mod().isLoaded("supplementaries"))
                        .add(LootItem.lootTableItem(ModRegistry.PANCAKE_ITEM.get()).setWeight(10)
                                .when(LootItemRandomChanceCondition.randomChance(0.1F)))
                        .add(LootItem.lootTableItem(ModRegistry.CANDY_ITEM.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                )
        );

        consumer.accept(KitchenLootTables.PHANTASM_EDIBLES, LootTable.lootTable()
                .withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1))
                        .setBonusRolls(ConstantValue.exactly(1.0F))
                        .when(ModCheckCondition.mod().isLoaded("phantasm"))
                        .add(LootItem.lootTableItem(PhantasmModItems.CHORUS_FRUIT_SALAD.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(PhantasmModItems.PUTAC_BROCHETTE.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                )
        );

        consumer.accept(KitchenLootTables.FARMERSDELIGHT_EDIBLES, LootTable.lootTable()
                .withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1))
                        .setBonusRolls(ConstantValue.exactly(1.0F))
                        .when(ModCheckCondition.mod().isLoaded("farmersdelight"))
                        .add(LootItem.lootTableItem(ModItems.CABBAGE.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.TOMATO.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.ONION.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.FRIED_EGG.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.MILK_BOTTLE.get()).setWeight(10))
                        .add(LootItem.lootTableItem(ModItems.HOT_COCOA.get()).setWeight(10).when(ModLootProviders.WINTER))
                        .add(LootItem.lootTableItem(ModItems.APPLE_CIDER.get()).setWeight(10).when(ModLootProviders.AUTUMN))
                        .add(LootItem.lootTableItem(ModItems.MELON_JUICE.get()).setWeight(10).when(ModLootProviders.SUMMER))
                        .add(LootItem.lootTableItem(ModItems.PUMPKIN_SLICE.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.BEEF_PATTY.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.COOKED_CHICKEN_CUTS.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.COOKED_BACON.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.COOKED_COD_SLICE.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.COOKED_SALMON_SLICE.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.COOKED_MUTTON_CHOPS.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.SMOKED_HAM.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.APPLE_PIE_SLICE.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.SWEET_BERRY_CHEESECAKE_SLICE.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.CHOCOLATE_PIE_SLICE.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.SWEET_BERRY_COOKIE.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.HONEY_COOKIE.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.MELON_POPSICLE.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.GLOW_BERRY_CUSTARD.get()).setWeight(10))
                        .add(LootItem.lootTableItem(ModItems.FRUIT_SALAD.get()).setWeight(10))
                        .add(LootItem.lootTableItem(ModItems.MIXED_SALAD.get()).setWeight(10))
                        .add(LootItem.lootTableItem(ModItems.NETHER_SALAD.get()).setWeight(10))
                        .add(LootItem.lootTableItem(ModItems.BARBECUE_STICK.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.EGG_SANDWICH.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.CHICKEN_SANDWICH.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.HAMBURGER.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.BACON_SANDWICH.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.MUTTON_WRAP.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.DUMPLINGS.get()).setWeight(10))
                        .add(LootItem.lootTableItem(ModItems.STUFFED_POTATO.get()).setWeight(10))
                        .add(LootItem.lootTableItem(ModItems.CABBAGE_ROLLS.get()).setWeight(10))
                        .add(LootItem.lootTableItem(ModItems.SALMON_ROLL.get()).setWeight(10))
                        .add(LootItem.lootTableItem(ModItems.COD_ROLL.get()).setWeight(10))
                        .add(LootItem.lootTableItem(ModItems.KELP_ROLL.get()).setWeight(10))
                        .add(LootItem.lootTableItem(ModItems.KELP_ROLL_SLICE.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.COOKED_RICE.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.BONE_BROTH.get()).setWeight(10))
                        .add(LootItem.lootTableItem(ModItems.BEEF_STEW.get()).setWeight(10))
                        .add(LootItem.lootTableItem(ModItems.CHICKEN_SOUP.get()).setWeight(10))
                        .add(LootItem.lootTableItem(ModItems.VEGETABLE_SOUP.get()).setWeight(10))
                        .add(LootItem.lootTableItem(ModItems.FISH_STEW.get()).setWeight(10))
                        .add(LootItem.lootTableItem(ModItems.FRIED_RICE.get()).setWeight(10))
                        .add(LootItem.lootTableItem(ModItems.PUMPKIN_SOUP.get()).setWeight(10))
                        .add(LootItem.lootTableItem(ModItems.BAKED_COD_STEW.get()).setWeight(10))
                        .add(LootItem.lootTableItem(ModItems.NOODLE_SOUP.get()).setWeight(10))
                        .add(LootItem.lootTableItem(ModItems.BACON_AND_EGGS.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.PASTA_WITH_MEATBALLS.get()).setWeight(10))
                        .add(LootItem.lootTableItem(ModItems.PASTA_WITH_MUTTON_CHOP.get()).setWeight(10))
                        .add(LootItem.lootTableItem(ModItems.MUSHROOM_RICE.get()).setWeight(10))
                        .add(LootItem.lootTableItem(ModItems.ROASTED_MUTTON_CHOPS.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.VEGETABLE_NOODLES.get()).setWeight(10))
                        .add(LootItem.lootTableItem(ModItems.STEAK_AND_POTATOES.get()).setWeight(10))
                        .add(LootItem.lootTableItem(ModItems.RATATOUILLE.get()).setWeight(10))
                        .add(LootItem.lootTableItem(ModItems.SQUID_INK_PASTA.get()).setWeight(10))
                        .add(LootItem.lootTableItem(ModItems.GRILLED_SALMON.get()).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(ModItems.ROAST_CHICKEN.get()).setWeight(10).when(ModLootProviders.AUTUMN))
                        .add(LootItem.lootTableItem(ModItems.STUFFED_PUMPKIN.get()).setWeight(10).when(ModLootProviders.AUTUMN))
                        .add(LootItem.lootTableItem(ModItems.HONEY_GLAZED_HAM.get()).setWeight(10).when(ModLootProviders.EASTER_EVENT))
                        .add(LootItem.lootTableItem(ModItems.SHEPHERDS_PIE.get()).setWeight(10).when(ModLootProviders.SPRING))
                )
        );

        consumer.accept(KitchenLootTables.FASTFOODDELIGHT_EDIBLES, LootTable.lootTable()
                .withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1))
                        .setBonusRolls(ConstantValue.exactly(1))
                        .when(ModCheckCondition.mod().isLoaded("fastfooddelight"))
                        .add(LootItem.lootTableItem(FFItems.APPLE_SAUCE.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FFItems.CARROT_FRIES.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FFItems.CHEESE.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FFItems.CHEESE_WRAP.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FFItems.CHEESEBURGER.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FFItems.CHICKEN_CHEESE_SANDWICH.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FFItems.CHICKEN_NUGGETS.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FFItems.CHICKEN_WRAP.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FFItems.CHOCOLATE_ICE_CREAM.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FFItems.COD_SANDWICH.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FFItems.COLA_SODA.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FFItems.CREAMING_SODA.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FFItems.CROQUE_MONSIEUR.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FFItems.FRENCH_FRIES.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FFItems.FRIED_ONIONS.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FFItems.FRUIT_ICE_CREAM.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FFItems.ICE_CREAM.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FFItems.ICED_TEA.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FFItems.LEMON_SODA.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FFItems.ORANGE_SODA.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FFItems.PORK_SANDWICH.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FFItems.RABBIT_SANDWICH.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FFItems.SALMON_SANDWICH.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(FFItems.SWEET_BERRY_ICE_CREAM.get())
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                )
        );

        consumer.accept(KitchenLootTables.VANILLA_EDIBLES, LootTable.lootTable()
                .withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1))
                        .setBonusRolls(ConstantValue.exactly(1.0F))
                        .add(LootItem.lootTableItem(Items.APPLE).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 5))))
                        .add(LootItem.lootTableItem(Items.BAKED_POTATO).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 3))))
                        .add(LootItem.lootTableItem(Items.BEETROOT).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(Items.BEETROOT_SOUP).setWeight(10))
                        .add(LootItem.lootTableItem(Items.BREAD).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(Items.CARROT).setWeight(10))
                        .add(LootItem.lootTableItem(Items.CHORUS_FRUIT).setWeight(5)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 2))))
                        .add(LootItem.lootTableItem(Items.COOKED_BEEF).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 5))))
                        .add(LootItem.lootTableItem(Items.COOKED_CHICKEN).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 3))))
                        .add(LootItem.lootTableItem(Items.COOKED_COD).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 2))))
                        .add(LootItem.lootTableItem(Items.COOKED_MUTTON).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 5))))
                        .add(LootItem.lootTableItem(Items.COOKED_PORKCHOP).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 5))))
                        .add(LootItem.lootTableItem(Items.COOKED_RABBIT).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 5))))
                        .add(LootItem.lootTableItem(Items.COOKED_SALMON).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 5))))
                        .add(LootItem.lootTableItem(Items.COOKIE).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(Items.DRIED_KELP).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 5))))
                        .add(LootItem.lootTableItem(Items.ENCHANTED_GOLDEN_APPLE).setQuality(6).setWeight(1)
                                .when(LootItemRandomChanceCondition.randomChance(0.01F)))
                        .add(LootItem.lootTableItem(Items.GLOW_BERRIES).setWeight(5)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 4))))
                        .add(LootItem.lootTableItem(Items.GOLDEN_APPLE).setQuality(1).setWeight(1)
                                .when(LootItemRandomChanceCondition.randomChance(0.1F)))
                        .add(LootItem.lootTableItem(Items.GOLDEN_CARROT).setWeight(10))
                        .add(LootItem.lootTableItem(Items.MELON_SLICE).setWeight(5)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 5))))
                        .add(LootItem.lootTableItem(Items.MUSHROOM_STEW).setWeight(10))
                        .add(LootItem.lootTableItem(Items.RABBIT_STEW).setWeight(10))
                        .add(LootItem.lootTableItem(Items.POTATO).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 7))))
                        .add(LootItem.lootTableItem(Items.SUSPICIOUS_STEW).apply(SetStewEffectFunction.stewEffect()
                                .withEffect(MobEffects.FIRE_RESISTANCE, ConstantValue.exactly(200))).setWeight(10))
                        .add(LootItem.lootTableItem(Items.SUSPICIOUS_STEW).apply(SetStewEffectFunction.stewEffect()
                                .withEffect(MobEffects.SATURATION, ConstantValue.exactly(200))).setWeight(10))
                        .add(LootItem.lootTableItem(Items.SUSPICIOUS_STEW).apply(SetStewEffectFunction.stewEffect()
                                .withEffect(MobEffects.JUMP, ConstantValue.exactly(200))).setWeight(10))
                        .add(LootItem.lootTableItem(Items.SUSPICIOUS_STEW).apply(SetStewEffectFunction.stewEffect()
                                .withEffect(MobEffects.REGENERATION, ConstantValue.exactly(200))).setWeight(10))
                        .add(LootItem.lootTableItem(Items.SUSPICIOUS_STEW).apply(SetStewEffectFunction.stewEffect()
                                .withEffect(MobEffects.NIGHT_VISION, ConstantValue.exactly(200))).setWeight(10))
                        .add(LootItem.lootTableItem(Items.SWEET_BERRIES).setWeight(10)
                                .apply(SetItemCountFunction.setCount(UniformGenerator.between(1, 5))))
                )
        );
    }
}
